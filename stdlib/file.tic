# standard file module

Function readfile Takes
	{string} path 
Does
	# reads the contents of a file to a string
	InclC "stdio.h"
	InclC "stdlib.h"
	InclC "errno.h"

	Declare {string} buffer

	EmitC "FILE *$VARPREFIX$f = fopen($VARPREFIX$path, \"r\");"
	EmitC "if (errno) {"
	EmitC "perror($VARPREFIX$path);"
	Raise "File could not be read"
	EmitC "}"
	EmitC "fseek($VARPREFIX$f, 0, SEEK_END);"
	EmitC "long $VARPREFIX$length = ftell($VARPREFIX$f);"
	EmitC "fseek($VARPREFIX$f, 0, SEEK_SET);"
	EmitC "/* char * */$VARPREFIX$buffer = (char *) malloc($VARPREFIX$length + 1);"
	EmitC "$VARPREFIX$buffer[$VARPREFIX$length] = '\\0';"
	EmitC "fread($VARPREFIX$buffer, 1, $VARPREFIX$length, $VARPREFIX$f);"
	EmitC "fclose($VARPREFIX$f);"
EndFunction Returning buffer

Function writefile Takes
	{string} path,
	{string} contents
Does
	# writes text to a file
	InclC "stdio.h"
	InclC "stdlib.h"
	InclC "errno.h"

	EmitC "FILE *$VARPREFIX$f;"
	EmitC "$VARPREFIX$f = fopen($VARPREFIX$path, \"w+\");"
	EmitC "if ($VARPREFIX$f) {"
	EmitC "fputs($VARPREFIX$contents, $VARPREFIX$f); }"
	EmitC "else {"
	Raise "File could not be written"
	EmitC "}"
	EmitC "fclose($VARPREFIX$f);"
EndFunction

Function createfile Takes
	{string} path
Does
	# creates a file
	InclC "stdio.h"

	EmitC "FILE *$VARPREFIX$f;"
	EmitC "fopen($VARPREFIX$path, \"w\");"
	#EmitC "fclose($VARPREFIX$f);"
EndFunction

Function removefile Takes
	{string} path
Does
	# removes a file
	InclC "stdio.h"

	EmitC "int $VARPREFIX$ret;"
	EmitC "$VARPREFIX$ret = remove($VARPREFIX$path);"
	EmitC "if ($VARPREFIX$ret) {"
	Raise "Could not remove file"
	EmitC "}"
EndFunction

Function checkfile Takes
	{string} path
Does
	# checks if a file exists
	InclC "stdio.h"
	InclC "unistd.h"

	Declare {bool} exists

	EmitC "if( access($VARPREFIX$path, F_OK ) == 0 ) {"
	EmitC "$VARPREFIX$exists = true;"
	EmitC "}else{"
	EmitC "$VARPREFIX$exists = false;}"
EndFunction Returning exists