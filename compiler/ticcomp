#!/usr/bin/python3
VERSION="1.2.1"

from lex import *
from emit import *
from parse import *
import sys, argparse, os, tempfile

def main(file, output, compiler, verbose, run, preserve_temp, generate_header):
    if verbose:
        print("Tic Compiler")

    if generate_header:
        preserve_temp = True
    
    if not preserve_temp:
        temp = tempfile.NamedTemporaryFile(suffix=".c", mode="w+t")
    elif generate_header:
        temp = os.path.splitext(output)[0]+'.h'
    else:
        temp = os.path.splitext(file)[0]+'.c'

    with open(file, 'r') as inputFile:
        input = inputFile.read()

    # Initialize the lexer, emitter, and parser.
    lexer = Lexer(input, False)#, verbose)
    emitter = Emitter(temp, verbose, preserve_temp, generate_header)
    parser = Parser(lexer, emitter, verbose, generate_header)

    if verbose:
        print("Parsing file.")
    parser.program() # Start the parser.
    if generate_header:
        emitter.writeFile(parser.functionsDeclared, parser.includes, parser.variablesDeclared) # Write the output to file.
    else:
        emitter.writeFile() # Write the output to file.

    if generate_header:
        if verbose:
            print("Generation of header file complete.")
        sys.exit(0)

    if verbose:
        print("Parsing complete.")

        print("Compiling file.") 
    # make sure dirs exist
    if not os.path.exists(os.path.dirname(output)):
        os.mkdir(os.path.dirname(output))
    # compile
    returnval = os.system(f"{compiler} {(temp if preserve_temp else temp.name)} -o {output} -lm")
    if not preserve_temp:
        temp.close()

    returnval = int(bin(returnval).replace("0b", "").rjust(16, '0')[:8], 2)
    if returnval != 0:
        print('Compilation failed with exit code ', returnval)
        sys.exit(returnval)

    elif verbose:
        print("Compiling completed.")

    for headerfile in parser.headerfiles:
        os.remove(headerfile)

    if run:
        os.system(output)
    
if __name__ == '__main__':
    
    if '--version' in sys.argv:
        print(f"Tic compiler version {VERSION} by Sjoerd Vermeulen")
        sys.exit(0)

    parser = argparse.ArgumentParser('ticcomp', description='Tic compiler',
                 usage='%(prog)s [-v -r -o <file> -c <compiler> -p -h] input\n -h/--help: show help message')
    parser.add_argument('input', type=str, help='input script (program passed in as .tic file)')
    parser.add_argument('-o', '--output', dest='file', action='store', help='specify the output file')
    parser.add_argument('-c', '--compiler', dest='compiler', default='/usr/bin/gcc', action='store', help='specify the c compiler (gcc by default)')
    parser.add_argument('-v', '--verbose', action='store_true', default=0, help='verbose compiling')
    parser.add_argument('-r', '--run', action='store_true', default=0, help='run after compilation')
    parser.add_argument('-p', '--preserve-temp', action='store_true', default=0, help='preserve temporary c file')
    parser.add_argument('-g', '--generate-header', action='store_true', default=0, help='generate a c header file (as only output)')
    parser.add_argument('--version', action='store_true', help='print version info')

    args = parser.parse_args()
    
    # check args n stuff
    if not os.path.exists(args.input):
        print(f"Error: File '{args.input}' does not exist")
        sys.exit(1)
    if not args.input.endswith('.tic'):
        print(f"Error: File '{args.input}' is no .tic file")
        sys.exit(1)
        
    if args.file == None:
        outfile = os.path.join(os.getcwd(), "bin", os.path.splitext(os.path.basename(args.input))[0])
    else:
        outfile = args.file
        if not os.path.exists(os.path.dirname(outfile)):
            print(f"Error: Output directory '{os.path.dirname(outfile)}' does not exist")
            sys.exit(1)
    
    if not os.path.exists(args.compiler):
        print(f"Error: Compiler '{args.compiler}' not found")
        sys.exit(1)
    
    main(args.input, outfile, args.compiler, args.verbose, args.run, args.preserve_temp, args.generate_header)