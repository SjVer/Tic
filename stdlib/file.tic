# standard file module

Function readfile Takes {string} path Does
	# reads the contents of a file to a string
	InclC "stdio.h"
	InclC "stdlib.h"
	InclC "errno.h"

	Declare {string} FILE_MODULE_READFILE_buffer

	EmitC "FILE *FILE_MODULE_READFILE_f = fopen(path, \"r\");"
	EmitC "if (errno) {"
	EmitC "perror(path);"
	Raise "File could not be read"
	EmitC "}"
	EmitC "fseek(FILE_MODULE_READFILE_f, 0, SEEK_END);"
	EmitC "long FILE_MODULE_READFILE_length = ftell(FILE_MODULE_READFILE_f);"
	EmitC "fseek(FILE_MODULE_READFILE_f, 0, SEEK_SET);"
	EmitC "/* char * */FILE_MODULE_READFILE_buffer = (char *) malloc(FILE_MODULE_READFILE_length + 1);"
	EmitC "FILE_MODULE_READFILE_buffer[FILE_MODULE_READFILE_length] = '\\0';"
	EmitC "fread(FILE_MODULE_READFILE_buffer, 1, FILE_MODULE_READFILE_length, FILE_MODULE_READFILE_f);"
	EmitC "fclose(FILE_MODULE_READFILE_f);"
EndFunction Returning FILE_MODULE_READFILE_buffer

Function writefile Takes
	{string} path, {string} contents
Does
	# writes text to a file
	InclC "stdio.h"
	InclC "stdlib.h"
	InclC "errno.h"

	EmitC "FILE *FILE_MODULE_WRITEFILE_f;"
	EmitC "FILE_MODULE_WRITEFILE_f = fopen(path, \"w+\");"
	EmitC "if (FILE_MODULE_WRITEFILE_f) {"
	EmitC "fputs(contents, FILE_MODULE_WRITEFILE_f); }"
	EmitC "else {"
	Raise "File could not be written"
	EmitC "}"
	EmitC "fclose(FILE_MODULE_WRITEFILE_f);"
EndFunction

Function createfile Takes {string} path Does
	# creates a file
	InclC "stdio.h"

	EmitC "FILE *FILE_MODULE_CREATEFILE_f;"
	EmitC "fopen(path, \"w\");"
	#EmitC "fclose(FILE_MODULE_CREATEFILE_f);"
EndFunction

Function removefile Takes {string} path Does
	# removes a file
	InclC "stdio.h"

	EmitC "int FILE_MODULE_REMOVEFILE_ret;"
	EmitC "FILE_MODULE_REMOVEFILE_ret = remove(path);"
	EmitC "if (FILE_MODULE_REMOVEFILE_ret) {"
	Raise "Could not remove file"
	EmitC "}"
EndFunction

Function checkfile Takes {string} path Does
	# checks if a file exists
	InclC "stdio.h"
	InclC "unistd.h"

	Declare {bool} exists

	EmitC "if( access( path, F_OK ) == 0 ) {"
	EmitC "exists = true;"
	EmitC "}else{"
	EmitC "exists = false;}"
EndFunction Returning exists

Declare {string} contents
Declare {string} path = "atestfile.txt"

# check if file exists:
Declare {bool} exists

Label check
Return checkfile With path To exists

If exists Then
   PrintLine "file already exists"
Else # create file
   PrintLine "file does not yet exist"
   Call createfile With path
   GoTo check
EndIf

# write to file
Call writefile With path, "test test!\n"

# read file
Return readfile With path To contents

Print "contents of file \""
Print path
PrintLine "\":\n"
Print contents

# remove file
Call removefile With path