# standard math module

# constants
Declare {constant number} PI  = 3.1415926
Declare {constant number} E   = 2.7182818
Declare {constant number} TAU = 6.2831853

#*
functions:
- pow (num, num)
- sqrt (num)
- sin (num)
- cos (num)
- tan (num)
- log (num)
- round (num, num, [bool])
*#

Function pow Takes
	{number} base, {number} power
Does
	Declare result = 1
	
	While power > 0 Repeat
		If power % 2 == 0 Then
			Set power = power // 2
			Set base = base * base
		Else
			Set power = power - 1
			Set result = result * base
			Set power = power // 2
			Set base = base * base
		EndIf
	EndWhile
EndFunction Returning result

Function sqrt Takes {number} value Does
	InclC "math.h"
	Declare {number} result
	EmitC "result = sqrt((double)value);"
EndFunction Returning result

Function sin Takes {number} value Does
	InclC "math.h"
	Declare {number} result
	EmitC "result = sin(value);"
EndFunction Returning result

Function cos Takes {number} value Does
	InclC "math.h"
	Declare {number} result
	EmitC "result = cos(value);"
EndFunction Returning result

Function tan Takes {number} value Does
	InclC "math.h"
	Declare {number} result
	EmitC "result = tan(value);"
EndFunction Returning result

Function log Takes {number} value Does
	InclC "math.h"
	Declare {number} result
	EmitC "result = log(value);"
EndFunction Returning result

Function round Takes
	{number} value, {number} decimals
Does
	Declare {number} result

	# check if decimals is int
	EmitC "if(decimals!=(int)decimals){"
	Raise "round: Amound of decimals must be an integer"
	EmitC "}"

	# round
	InclC "math.h"
	EmitC "result = round(value*pow(10,decimals))/pow(10,decimals);"
EndFunction Returning result