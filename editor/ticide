#!/usr/bin/python3
# ----- imports -----
import gi

gi.require_version('Gtk', '3.0')
# noinspection PyUnresolvedReferences
from gi.repository import Gtk as gtk
# noinspection PyUnresolvedReferences
from gi.repository import Gdk as gdk

gi.require_version('GtkSource', '3.0')
# noinspection PyUnresolvedReferences
from gi.repository import GtkSource as gtksource
# noinspection PyUnresolvedReferences
from gi.repository import Pango as pango

from editor_class import Editor
from windows import *

# -------------------

VERSION = "1.0.1"


class MainWindow(BuildMainWindow):
	"""Instance of application (main window)"""

	def __init__(self):
		super().__init__()
		self.editors = []

		self.first = True
		self.new_editor()

		# self.window.
		self.window.resize(800, 600)
		self.window.show_all()
		gtk.main()

	def new_editor(self, focus=True):
		ed = Editor(self.notebook)
		self.editors.append(ed)
		self.notebook.append_page(ed.scrollwindow, gtk.Label(label=ed.filename))
		self.notebook.set_tab_detachable(ed.scrollwindow, True)
		if focus:
			pass
		self.notebook.show_all()
		return ed

	def new_editor_load(self, *args):
		if self.first:
			self.notebook.remove_page(0)
			self.first = False
		ed = self.new_editor()
		ed.loadfile()

	def save_current_page(self, *args):
		ed = self.notebook.get_children()[self.notebook.get_current_page()].parent_editor 
		if ed._filepath is None:
			self.save_current_page_as()
		else:
			ed.savefile(False)

	def save_current_page_as(self, *args):
		self.notebook.get_children()[self.notebook.get_current_page()].parent_editor.savefile(True)

	def get_current_editor(self):
		if len(self.notebook.get_children()) > 0:
			return self.notebook.get_children()[self.notebook.get_current_page()].parent_editor
		else:
			return None

	def main_quit(self, *args):
		gtk.main_quit()

if __name__ == "__main__":
	MainWindow()
