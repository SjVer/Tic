%YAML 1.2

---

name: Tic
file_extensions: [tic]
fileTypes: [tic]
scope: source.tic

variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'
  hint: '{[A-Za-z_][A-Za-z_0-9]*}'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  includes:
    - include: keywords
    - include: numbers
    - include: strings
    - include: hints
    # - include: variables
    - include: operators
    - include: functions
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: includes

    - match: '\b(true|false)\b'
      scope: constant.numeric.example-c
    - match: '\b{{ident}}\b'
    - match: ','

    - match: \S
      scope: invalid

  operators:
    - match: (?:\+\+|--)
      scope: keyword.operator.arithmetic.c
    - match: "'s "
      scope: keyword.operator.c
      # scope: punctuation.accessor.c
    #- match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
    #  scope: keyword.operator.assignment.augmented.c
    # (?# - match: <<|>>|&&|\|\|)
      # scope: keyword.operator.arithmetic.c
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
    - match: \+|\-|/|%|\||\^|~|!
      scope: keyword.operator.arithmetic.c
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.c
    - match: \=
      scope: keyword.operator.assignment.c

  hints:
    - match: \{
      scope: variable.parameter # constant.character.escape.example-c #punctuation.definition.string.begin.example-c
      push:
      - meta_include_prototype: false
      - match: '\b(constant|optional|)\b'
        scope: variable.parameter
      - match: '\b(number|bool|string)\b'
        # scope: constant.character.escape.example-c
        scope: variable.parameter
        set:
        - match: \}
          scope: variable.parameter
          pop: true
      - match: \S
        scope: invalid.illegal
        push:
        - match: \}
          scope: variable.parameter

  functions:
    - match: 'Function'
      # scope: entity.other.inherited-class
      scope: entity.other.inherited-class
      # set: [function_name, functions_block]
      set: function_name

    - match: 'Class'
      scope: entity.other.inherited-class
      set: class_name

    - match: 'EndClass'
      scope: entity.other.inherited-class

    # - match: 'EndMethod'
      # scope: entity.other.inherited-class

    - match: 'Use'
      scope: variable.function
      set: use_name

    - match: 'Call'
      scope: entity.other.inherited-class
      # scope: entity.other.attribute-name
      set: call

    - match: 'Instance'
      scope: entity.other.inherited-class
      set: instance

    - match: 'Return'
      scope: entity.other.inherited-class
      push: return
      # set: return

    - match: '\b(Label|GoTo)\b'
      scope: keyword
      set: label

    - match: '\b(Sleep|Declare|Set|Input|Print|PrintLine|StartWith|Exit|Break|EmitC|InclC|Raise)\b'
      scope: variable.function

  function_name:
    - meta_include_prototype: false
    # - meta_scope: entity.other.inherited-class
    - meta_scope: variable.function
    - match: ' '
      scope: entity.other.inherited-class
    - match: 'Does'
      scope: entity.other.inherited-class
      set: function_code
    - match: 'Takes'
      scope: entity.other.inherited-class
      set:
        - meta_include_prototype: false
        - include: includes
        - match: 'Does'
          scope: entity.other.inherited-class
          # pop: true
          set: function_code

  function_code:
    - include: includes
    # - match: 'self'
      # scope: variable.parameter
      # scope: keyword
    - match: 'EndFunction'
      scope: entity.other.inherited-class
      # pop: true
      set:
        - match: 'Returning'
          scope: entity.other.inherited-class
          pop: true
        - match: $\n?
          pop: true
        - match: \S
          pop: true

  class_name:
    - meta_include_prototype: false
    # - meta_scope: entity.other.inherited-class
    - meta_scope: variable.function
    - match: ' '
      scope: entity.other.inherited-class
    - match: 'Does'
      scope: entity.other.inherited-class
      set: class_code
    - match: 'Has'
      scope: entity.other.inherited-class
      set: class_fields

  class_fields:
    - meta_include_prototype: false
    - include: includes
    - match: 'Does'
      scope: entity.other.inherited-class
      # pop: true
      set: class_code
    - match: 'EndClass'
      scope: entity.other.inherited-class
      pop: true

  class_code:
    - include: includes
    - match: 'Method'
      scope: entity.other.inherited-class
      set: method_name

    - match: 'EndClass'
      scope: entity.other.inherited-class
      pop: true

  method_name:
    - meta_include_prototype: false
    # - meta_scope: entity.other.inherited-class
    - meta_scope: variable.function
    - match: ' '
      scope: entity.other.inherited-class
    - match: 'Does'
      scope: entity.other.inherited-class
      set: method_code
    - match: 'Takes'
      scope: entity.other.inherited-class
      set:
        - meta_include_prototype: false
        - include: includes
        - match: 'Does'
          scope: entity.other.inherited-class
          # pop: true
          set: method_code

  method_code:
    - include: includes
    - match: 'self'
      scope: variable.parameter
      # scope: keyword
    - match: 'EndMethod'
      scope: entity.other.inherited-class
      # pop: true
      set:
        - match: 'Returning'
          scope: entity.other.inherited-class
          # pop: true
          # set: class_code
          set:
            - include: includes
            - match: 'self'
              scope: variable.parameter
            - match: \S
              set: class_code
        - match: $\n?
          set: class_code
          # pop: true
        - match: \S
          set: class_code
          # pop: true

  keywords:
    - match: '\b(If|Then|Else|ElseIf|EndIf|
      |For|Do|EndFor|While|Repeat|EndWhile|Or|And|
      |SwitchFor|InCase|Otherwise|EndSwitch)\b'
      scope: keyword.control.example-c

  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.example-c

  use_name:
    - meta_include_prototype: false
    - meta_scope: entity.other.attribute-name
    - match: $\n?
      pop: true

  call:
    - meta_include_prototype: false
    - meta_scope: variable.function
    # - meta_scope: entity.other.attribute-name
    - match: "'s "
      scope: keyword.operator.c
    - match: 'With'
      # scope: entity.other.attribute-name
      scope: entity.other.inherited-class
      pop: true
    - match: $\n?
      scope: entity.other.inherited-class
      # scope: entity.other.attribute-name
      pop: true

  instance:
    - meta_include_prototype: false
    # - meta_scope: variable.function
    # - meta_scope: entity.other.attribute-name
    - match: 'Of'
      # scope: entity.other.attribute-name
      scope: entity.other.inherited-class
      # pop: true
      set:
        - meta_include_prototype: false
        - meta_scope: variable.function
        - match: $\n?
          pop: true
    #- match: $\n?
      # scope: entity.other.inherited-class
      # scope: entity.other.attribute-name
      # pop: true

  return:
    - meta_include_prototype: false
    - meta_scope: variable.function
    # - meta_scope: entity.other.attribute-name
    - match: "'s "
      scope: keyword.operator.c
    - match: 'With'
      # scope: entity.other.attribute-name
      scope: entity.other.inherited-class
      set:
        - include: includes
        # - meta_include_prototype: false
        - match: 'To'
          scope: entity.other.inherited-class
          pop: true
    - match: 'To'
      scope: entity.other.inherited-class
      # scope: entity.other.attribute-name
      pop: true

  label:
    - meta_include_prototype: false
    - meta_scope: keyword
    - match: $\n?
      pop: true
    # (?# - match: '. ')
      # scope: invalid.illegal

    - match: '#'
      scope: punctuation.definition.comment.example-c
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.example-c
        - match: $\n?
          pop: true

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    # - match: \\
      # scope: invalid.illegal
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  comments:
    - match: '#\*'
      scope: punctuation.definition.comment.example-c
      push:
        - meta_scope: comment.line.double-slash.example-c
        - match: '\*#'
          pop: true

    - match: '#'
      scope: punctuation.definition.comment.example-c
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.example-c
        - match: $\n?
          pop: true
